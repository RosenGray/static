window.process = { env: { NODE_ENV: "production" } };
let rootNode = document.getElementById("root");
const nextJsNode = document.getElementById('__next');

function loadScript(e) {
  return new Promise((o, t) => {
    const n = document.createElement("script");
    (n.src = e),
      (n.crossOrigin = "anonymous"),
      (n.onload = o),
      (n.onerror = t),
      document.head.appendChild(n);
  });
}
function loadStyle(e) {
  return new Promise((o, t) => {
    const n = document.createElement("link");
    (n.rel = "stylesheet"),
      (n.href = e),
      (n.onload = o),
      (n.onerror = t),
      document.head.appendChild(n);
  });
}
// Load React and ReactDOM only if nextJsNode is null
if (!nextJsNode) {
    const reactCdn = "development" === window.process.env.NODE_ENV
      ? "https://unpkg.com/react@18/umd/react.development.js"
      : "https://unpkg.com/react@18/umd/react.production.min.js";
    const reactDomCdn = "development" === window.process.env.NODE_ENV
      ? "https://unpkg.com/react-dom@18/umd/react-dom.development.js"
      : "https://unpkg.com/react-dom@18/umd/react-dom.production.min.js";
  
    loadScript(reactCdn)
      .then(() => loadScript(reactDomCdn))
      .catch((e) => {
        console.error("Failed to load React or ReactDOM", e);
      });
  }
  
  // Always load these resources
  loadStyle("https://rosengray.github.io/static/style.css")
    .then(() => loadScript("https://rosengray.github.io/static/accessibilik.umd.min.cjs"))
    .catch((e) => {
      console.error("Failed to load resources", e);
    });
  
  // If rootNode does not exist, create it
  if (!rootNode) {
    ((rootNode = document.createElement("div")).id = "root-accessibilik"),
      document.getElementsByTagName("body")[0].append(rootNode);
  }